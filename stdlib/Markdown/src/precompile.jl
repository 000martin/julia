function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(Base._setindex!), Base.Dict{Any, Any}, Markdown.Config, Symbol, Int64})
    precompile(Tuple{Type{Markdown.MD}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Markdown.Config, Symbol})
    precompile(Tuple{typeof(Markdown.skipblank), Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{typeof(Markdown.with_output_format), typeof(Base.print), Array{Symbol, 1}, Base.TTY, Char})
    precompile(Tuple{typeof(Markdown.hashheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{typeof(Markdown.parseinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD, Array{Function, 1}})
    precompile(Tuple{typeof(Markdown.config), Markdown.MD})
    precompile(Tuple{typeof(Markdown.parseinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD, Markdown.Config})
    precompile(Tuple{typeof(Markdown.list), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##skipwhitespace")), Array{Any, 1}, typeof(Markdown.skipwhitespace), Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Markdown.Config}, Symbol})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##parse")), Array{Any, 1}, typeof(Markdown.parse), Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##startswith")), Array{Any, 1}, typeof(Markdown.startswith), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Regex})
    precompile(Tuple{typeof(Markdown.pushitem!), Markdown.List, Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{typeof(Markdown.fencedcode), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##startswith")), Array{Any, 1}, typeof(Markdown.startswith), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
    precompile(Tuple{typeof(Markdown.blockquote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##parse")), Array{Any, 1}, typeof(Markdown.parse), String})
    precompile(Tuple{typeof(Markdown.admonition), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##linecontains")), Array{Any, 1}, typeof(Markdown.linecontains), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
    precompile(Tuple{typeof(Markdown.blocktex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##parse_inline_wrapper")), Array{Any, 1}, typeof(Markdown.parse_inline_wrapper), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
    precompile(Tuple{typeof(Markdown.startswith), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
    precompile(Tuple{typeof(Markdown.blockinterp), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{typeof(Markdown.interpinner), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
    precompile(Tuple{typeof(Markdown.indentcode), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{typeof(Markdown.footnote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{Type{Markdown.Footnote}, Void, Array{Any, 1}})
    precompile(Tuple{Type{Markdown.Footnote}, Base.SubString{String}, Array{Any, 1}})
    precompile(Tuple{typeof(Markdown.github_table), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{typeof(Markdown.parseinline), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Markdown.MD, Array{Function, 1}})
    precompile(Tuple{typeof(Markdown.parseinline), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Markdown.MD, Markdown.Config})
    precompile(Tuple{typeof(Markdown.parsealign), Void})
    precompile(Tuple{typeof(Markdown.parsealign), Array{Base.SubString{String}, 1}})
    precompile(Tuple{typeof(Markdown.rowlength!), Void, Int64})
    precompile(Tuple{typeof(Markdown.rowlength!), Array{Base.SubString{String}, 1}, Int64})
    precompile(Tuple{Type{Markdown.Table}, Array{Any, 1}, Void})
    precompile(Tuple{Type{Markdown.Table}, Array{Any, 1}, Array{Symbol, 1}})
    precompile(Tuple{typeof(Markdown.horizontalrule), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{typeof(Core.Inference.isbits), Markdown.HorizontalRule})
    precompile(Tuple{typeof(Markdown.setextheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{typeof(Markdown.paragraph), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##parse")), Array{Any, 1}, typeof(Markdown.parse), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD, Markdown.Config})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##parse")), Array{Any, 1}, typeof(Markdown.parse), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{typeof(Markdown.inline_code), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
    precompile(Tuple{typeof(Markdown.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
    precompile(Tuple{typeof(Markdown.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}})
    precompile(Tuple{typeof(Base.setindex!), Array{Markdown.MD, 1}, Markdown.MD, Int64})
    precompile(Tuple{typeof(Base.unsafe_copy!), Array{Markdown.MD, 1}, Int64, Array{Markdown.MD, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.copy!), Base.IndexLinear, Array{Any, 1}, Base.IndexLinear, Array{Markdown.MD, 1}})
    precompile(Tuple{Type{Markdown.MD}, Array{Markdown.MD, 1}})
    precompile(Tuple{Type{Markdown.MD}, Markdown.MD})
    precompile(Tuple{typeof(Base.vcat), Markdown.MD})
    precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Markdown.MD, Void}})
    precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Markdown.MD, Void}})
    precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Markdown.MD, Void}})
    precompile(Tuple{typeof(Base.start), Tuple{Markdown.MD, Void}})
    precompile(Tuple{typeof(Base.indexed_next), Tuple{Markdown.MD, Void}, Int64, Int64})
    precompile(Tuple{typeof(Base.Multimedia.display), Markdown.MD})
    precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Markdown.MD})
    precompile(Tuple{typeof(Markdown.term), Base.Terminals.TTYTerminal, Array{Any, 1}, Int64})
    precompile(Tuple{typeof(Markdown.term), Base.Terminals.TTYTerminal, Markdown.MD, Int64})
    precompile(Tuple{typeof(Markdown.term), Base.Terminals.TTYTerminal, Markdown.Code, Int64})
    precompile(Tuple{typeof(Markdown.term), Base.Terminals.TTYTerminal, Markdown.Paragraph, Int64})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##wrapped_lines")), Array{Any, 1}, typeof(Markdown.wrapped_lines), String})
    precompile(Tuple{typeof(Markdown.terminline), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
    precompile(Tuple{typeof(Markdown.terminline), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
    precompile(Tuple{typeof(Markdown.terminline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code})
    precompile(Tuple{getfield(Markdown, Symbol("#kw##wrapped_lines")), Array{Any, 1}, typeof(Markdown.wrapped_lines), Base.SubString{String}})
end
