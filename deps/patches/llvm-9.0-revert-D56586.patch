From f49ab8f85bc1d40d5816cfb8cb019e5b351bdf9d Mon Sep 17 00:00:00 2001
From: Valentin Churavy <v.churavy@gmail.com>
Date: Tue, 14 Apr 2020 17:41:11 -0400
Subject: [PATCH] Revert "[PPC64] Update LocalEntry from assigned symbols"

This reverts commit cd36a2857ea172d70a7a841f4b622a5f408944a9.
---
 .../PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp  | 30 ++++---------------
 ...ry-symbols.s => ppc64-localentry-symver.s} | 17 -----------
 2 files changed, 6 insertions(+), 41 deletions(-)
 rename llvm/test/MC/PowerPC/{ppc64-localentry-symbols.s => ppc64-localentry-symver.s} (58%)

diff --git llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp
index 90c3c8d20ed..2eedf8247bd 100644
--- llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp
+++ llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp
@@ -15,7 +15,6 @@
 #include "MCTargetDesc/PPCMCAsmInfo.h"
 #include "PPCTargetStreamer.h"
 #include "TargetInfo/PowerPCTargetInfo.h"
-#include "llvm/ADT/SmallPtrSet.h"
 #include "llvm/ADT/StringRef.h"
 #include "llvm/ADT/Triple.h"
 #include "llvm/BinaryFormat/ELF.h"
@@ -185,33 +184,16 @@ public:
 
   void emitAssignment(MCSymbol *S, const MCExpr *Value) override {
     auto *Symbol = cast<MCSymbolELF>(S);
-
     // When encoding an assignment to set symbol A to symbol B, also copy
     // the st_other bits encoding the local entry point offset.
-    if (copyLocalEntry(Symbol, Value))
-      UpdateOther.insert(Symbol);
-    else
-      UpdateOther.erase(Symbol);
-  }
-
-  void finish() override {
-    for (auto *Sym : UpdateOther)
-      copyLocalEntry(Sym, Sym->getVariableValue());
-  }
-
-private:
-  SmallPtrSet<MCSymbolELF *, 32> UpdateOther;
-
-  bool copyLocalEntry(MCSymbolELF *D, const MCExpr *S) {
-    auto *Ref = dyn_cast<const MCSymbolRefExpr>(S);
-    if (!Ref)
-      return false;
-    const auto &RhsSym = cast<MCSymbolELF>(Ref->getSymbol());
-    unsigned Other = D->getOther();
+    if (Value->getKind() != MCExpr::SymbolRef)
+      return;
+    const auto &RhsSym = cast<MCSymbolELF>(
+        static_cast<const MCSymbolRefExpr *>(Value)->getSymbol());
+    unsigned Other = Symbol->getOther();
     Other &= ~ELF::STO_PPC64_LOCAL_MASK;
     Other |= RhsSym.getOther() & ELF::STO_PPC64_LOCAL_MASK;
-    D->setOther(Other);
-    return true;
+    Symbol->setOther(Other);
   }
 };
 
diff --git llvm/test/MC/PowerPC/ppc64-localentry-symbols.s llvm/test/MC/PowerPC/ppc64-localentry-symver.s
similarity index 58%
rename from llvm/test/MC/PowerPC/ppc64-localentry-symbols.s
rename to llvm/test/MC/PowerPC/ppc64-localentry-symver.s
index f1d5c5d0ab1..4c7490646db 100644
--- llvm/test/MC/PowerPC/ppc64-localentry-symbols.s
+++ llvm/test/MC/PowerPC/ppc64-localentry-symver.s
@@ -4,11 +4,6 @@
 # CHECK: 0000000000000000 gw    F .text  00000000 0x60 __impl_foo
 # CHECK: 0000000000000000 g     F .text  00000000 0x60 foo
 # CHECK: 0000000000000000 gw    F .text  00000000 0x60 foo@FBSD_1.1
-# CHECK: 0000000000000008 g     F .text  00000000 0x60 func
-# CHECK: 0000000000000008 gw    F .text  00000000 0x60 weak_func
-
-.text
-.abiversion 2
 
 .globl foo
 .type foo,@function
@@ -20,15 +15,3 @@ foo:
 .symver __impl_foo, foo@FBSD_1.1
 .weak   __impl_foo
 .set    __impl_foo, foo
-
-.globl  func
-# Mimick FreeBSD weak function/reference
-.weak   weak_func
-.equ    weak_func, func
-
-.p2align 2
-.type    func,@function
-func:
-  nop
-  nop
-  .localentry func, 8
-- 
2.26.0

